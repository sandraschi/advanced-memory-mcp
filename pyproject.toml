[project]
name = "advanced-memory"
version = "1.0.0b1"
description = "Independent local-first knowledge management system combining Zettelkasten with knowledge graphs, derived from Basic Memory with significant enhancements"
readme = "README.md"
requires-python = ">=3.12.1"
license = { text = "AGPL-3.0-or-later" }
authors = [
    { name = "Advanced Memory Community", email = "hello@advanced-memory.com" }
]
dependencies = [
    "sqlalchemy>=2.0.0",
    "pyyaml>=6.0.1",
    "typer>=0.9.0",
    "aiosqlite>=0.20.0",
    "greenlet>=3.1.1",
    "pydantic[email,timezone]>=2.10.3",
    "icecream>=2.1.3",
    "mcp>=1.2.0",
    "pydantic-settings>=2.6.1",
    "loguru>=0.7.3",
    "pyright>=1.1.390",
    "markdown-it-py>=3.0.0",
    "python-frontmatter>=1.1.0",
    "rich>=13.9.4",
    "unidecode>=1.3.8",
    "dateparser>=1.2.0",
    "watchfiles>=1.0.4",
    "fastapi[standard]>=0.115.8",
    "alembic>=1.14.1",
    "pillow>=11.1.0",
    "pybars3>=0.9.7",
    "fastmcp==2.10.1",
    "pyjwt>=2.10.1",
    "python-dotenv>=1.1.0",
    "pytest-aio>=1.9.0",
]


[project.urls]
Homepage = "https://github.com/advanced-memory/advanced-memory"
Repository = "https://github.com/advanced-memory/advanced-memory"
Documentation = "https://github.com/advanced-memory/advanced-memory#readme"

[project.scripts]
advanced-memory = "basic_memory.cli.main:app"
am = "basic_memory.cli.main:app"
release = "scripts.release:main"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
addopts = "-v -s"
testpaths = ["tests"]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100
target-version = "py312"
extend-exclude = ["migrations"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.uv]
dev-dependencies = [
    "gevent>=24.11.1",
    "icecream>=2.1.3",
    "pytest>=8.3.4",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.6",
    "mypy>=1.8.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.6.0",
    "types-all>=1.0.0",
]

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true
fallback-version = "0.0.0"

[tool.pyright]
include = ["src/"]
exclude = ["**/__pycache__"]
ignore = ["test/"]
defineConstant = { DEBUG = true }
reportMissingImports = "error"
reportMissingTypeStubs = false
pythonVersion = "3.12"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "fastmcp.*",
    "uv.*",
]
ignore_missing_imports = true



[tool.coverage.run]
concurrency = ["thread", "gevent"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Exclude specific modules that are difficult to test comprehensively
omit = [
    "*/external_auth_provider.py",  # External HTTP calls to OAuth providers
    "*/supabase_auth_provider.py",  # External HTTP calls to Supabase APIs
    "*/watch_service.py",           # File system watching - complex integration testing
    "*/background_sync.py",         # Background processes
    "*/cli/main.py",               # CLI entry point
    "*/services/migration_service.py", # Complex migration scenarios
]

[tool.logfire]
ignore_no_config = true
